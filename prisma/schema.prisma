datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {

  id            Int       @id @default(autoincrement())
  email         String        @unique @db.VarChar(30)
  password      String?       @db.VarChar(200)
  nickname      String        @unique @db.VarChar(30)
  createdAt     DateTime
  updatedAt     DateTime?
  provider      String?
  followers     Follow[]      @relation("Follower")
  followings    Follow[]      @relation("Following")
  profile       Profile?
  admin         Channel[]     @relation("admin")
  participants  Participant[]  @relation("Join")
  channellike   ChannelLike[]

  @@map(name: "users")
}

model Profile {
  id             Int              @id @default(autoincrement())
  department     String?          @db.VarChar(50)
  introduce      String?          @db.Text
  createdAt      DateTime
  updatedAt      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  welltalent     WellTalent[]
  interesttalent InterestTalent[]
  profileImage   Image?

  @@map(name: "profiles")
}

model InterestTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "interest_talents")
}

model WellTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "well_talents")
}

model Image {
  id        Int       @id @default(autoincrement())
  src       String?   @db.VarChar(200)
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  channel   Channel?  @relation(fields: [channelId],references:[id])
  channelId Int?

  @@map(name: "images")
}

model Auth {
  id        Int       @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  email     String    @unique @db.VarChar(30)
  auth      String

  @@map("auth")
}

//User to User Follow N:M relation table
model Follow {
  follower    User      @relation("Follower", fields: [followerId], references: [id])
  followerId  Int
  following   User      @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime
  updatedAt   DateTime?

  @@id([followerId, followingId])
  @@map("follow")
}

model Participant {
  user        User    @relation("Join", fields:[userId],references:[id])
  userId      Int
  channel     Channel @relation("Participant",fields: [channelId],references:[id])
  channelId   Int

  @@id([userId,channelId])
  @@map("participants")
}

model Channel {
  id              Int       @id @default(autoincrement())
  name            String
  introduce       String?   @db.Text
  channelImage    Image?
  admin           User      @relation("admin",fields: [adminId],references:[id])
  adminId         Int
  participants    Participant[]  @relation("Participant")
  tags            ChannelTag[]
  category        ChannelCategory?
  channellike     ChannelLike[]
  createdAt       DateTime
  updatedAt       DateTime?

  @@unique([name,adminId])
  @@map("channels")
}


model Tag {
  id        Int       @id @default(autoincrement())
  name      String    
  createdAt DateTime
  updatedAt DateTime?
  channel   ChannelTag[]

  @@map("tags")
}

model ChannelTag{
  channel   Channel @relation(fields: [channelId],references:[id])
  channelId Int
  tag       Tag @relation(fields: [tagId],references:[id])
  tagId     Int
  createdAt DateTime
  updatedAt DateTime?

  @@id([channelId,tagId])
  @@map("channel_tags")
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String        
  createdAt DateTime
  updatedAt DateTime?
  channel   ChannelCategory?

  @@map("categories")
}

model ChannelCategory{
  channel       Channel @relation(fields: [channelId],references:[id])
  channelId     Int
  category      Category @relation(fields: [categoryId],references:[id])
  categoryId    Int
  createdAt     DateTime
  updatedAt     DateTime?

  @@id([channelId,categoryId])
  @@map("channel_categories")
}

// Channel -- Like -- User
model ChannelLike {
  user            User      @relation(fields:[userId], references: [id])
  userId          Int
  channel         Channel   @relation(fields: [channelId],references:[id])
  channelId       Int
  createdAt       DateTime
  updatedAt       DateTime?

  @@id([userId,channelId])
  @@map("channel_like")
}