datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(30)
  password    String?   @db.VarChar(200)
  nickname    String    @unique @db.VarChar(30)
  createdAt   DateTime
  updatedAt   DateTime?
  provider    String?
  followers   Follow[]  @relation("Follower")
  followings  Follow[]  @relation("Following")
  profile     Profile?
  admin       Channel[] @relation("admin")
  participant Channel[]
  like        Like[]

  @@map(name: "users")
}

model Profile {
  id             Int              @id @default(autoincrement())
  department     String?          @db.VarChar(50)
  introduce      String?          @db.Text
  createdAt      DateTime
  updatedAt      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  welltalent     WellTalent[]
  interesttalent InterestTalent[]
  profileImage   Image?

  @@map(name: "profiles")
}

model InterestTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "interest_talents")
}

model WellTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "well_talents")
}

model Image {
  id        Int       @id @default(autoincrement())
  src       String?   @db.VarChar(200)
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  channel   Channel?  @relation(fields: [channelId],references:[id])
  channelId Int?

  @@map(name: "images")
}

model Auth {
  id        Int       @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  email     String    @unique @db.VarChar(30)
  auth      String

  @@map("auth")
}

//User to User Follow N:M relation table
model Follow {
  follower    User      @relation("Follower", fields: [followerId], references: [id])
  followerId  Int
  following   User      @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime
  updatedAt   DateTime?

  @@id([followerId, followingId])
  @@map("follow")
}

model Channel {
  id              Int       @id @default(autoincrement())
  name            String
  introduce       String?   @db.Text
  channelImage    Image?
  admin           User      @relation("admin",fields: [adminId],references:[id])
  adminId         Int
  participant     User[]
  tag             Tag[]
  category        Category?
  like            Like[]
  createdAt       DateTime
  updatedAt       DateTime?

  @@unique([name,adminId])
  @@map("channels")
}

model Tag {
  name      String
  createdAt DateTime
  updatedAt DateTime?
  channel   Channel   @relation(fields: [channelId],references:[id])
  channelId Int

  @@id([name,channelId])
  @@map("tags")
}

model Category {
  name      String        @id
  createdAt DateTime
  updatedAt DateTime?
  channel   Channel       @relation(fields: [channelId],references:[id])
  channelId Int

  @@map("categories")
}

// Channel -- Like -- User
model Like {
  user            User      @relation(fields:[userId], references: [id])
  userId          Int
  channel         Channel   @relation(fields: [channelId],references:[id])
  channelId       Int
  createdAt       DateTime
  updatedAt       DateTime?

  @@id([userId,channelId])
  @@map("like")
}