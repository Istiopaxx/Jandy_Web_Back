datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {

  id              Int           @id @default(autoincrement())
  email           String        @unique @db.VarChar(30)
  password        String?       @db.VarChar(200)
  nickname        String?       @unique @db.VarChar(30)
  createdAt       DateTime
  updatedAt       DateTime?
  provider        String?
  followers       Follow[]      @relation("Following")
  followings      Follow[]      @relation("Follower")
  profile         Profile?
  admin           Channel[]     @relation("admin")
  participants    Participant[] @relation("Join")
  channellike     ChannelLike[]
  ban             Ban[]         @relation("ban")
  roomOwner       ChannelRoom[] @relation("RoomOwner")
  chatMessage     ChatMessage[]
  roomParticipant RoomUser[]
  post            Post[]        @relation("post")
  comment         Comment[]     @relation("comment")
  attention       Attention[]   @relation("Attention")
  @@map(name: "users")
}

model Profile {
  id             Int              @id @default(autoincrement())
  department     String?          @db.VarChar(50)
  introduce      String?          @db.Text
  createdAt      DateTime
  updatedAt      DateTime?
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  wellTalent     WellTalent[]
  interestTalent InterestTalent[]
  profileImage   Image?

  @@map(name: "profiles")
}

model InterestTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "interest_talents")
}

model WellTalent {
  id        Int       @id @default(autoincrement())
  contents  String?
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int

  @@map(name: "well_talents")
}

model Image {
  id        Int       @id @default(autoincrement())
  src       String?   @db.VarChar(200)
  createdAt DateTime
  updatedAt DateTime?
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  channel   Channel?  @relation(fields: [channelId], references: [id])
  channelId Int?
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?

  @@map(name: "images")
}

model Auth {
  id        Int       @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  email     String    @unique @db.VarChar(30)
  auth      String

  @@map("auth")
}

//User to User Follow N:M relation table
model Follow {
  follower    User      @relation("Follower", fields: [followerId], references: [id])
  followerId  Int
  following   User      @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime
  updatedAt   DateTime?

  @@unique([followerId, followingId], name: "followKey")
  @@map("follow")
}

model Participant {
  user      User    @relation("Join", fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation("Participant", fields: [channelId], references: [id])
  channelId Int

  @@id([userId, channelId])
  @@map("participants")
}

model Channel {
  id           Int              @id @default(autoincrement())
  name         String
  introduce    String?          @db.Text
  channelImage Image?
  admin        User             @relation("admin", fields: [adminId], references: [id])
  adminId      Int
  participants Participant[]    @relation("Participant")
  tags         ChannelTag[]
  category     ChannelCategory?
  channellike  ChannelLike[]
  ban          Ban[]
  channelRoom  ChannelRoom[]
  baseRoomChat ChatMessage[]
  post         Post[]


  createdAt DateTime
  updatedAt DateTime?

  @@unique([name, adminId])
  @@map("channels")
}

model RoomUser {
  channelRoom   ChannelRoom @relation(fields: [channelRoomId], references: [id])
  channelRoomId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  status        String      @default("active")

  @@unique([channelRoomId, userId], name: "RoomUser")
  @@map(name: "room_users")
}

model ChannelRoom {
  id              Int           @id @default(autoincrement())
  status          String
  name            String
  channelId       Int
  userId          Int
  roomOwner       User          @relation("RoomOwner", fields: [userId], references: [id]) //룸생성자
  channel         Channel       @relation(fields: [channelId], references: [id]) //룸이 소속한채널
  roomParticipant RoomUser[]
  reservedAt      DateTime?
  createdAt       DateTime
  updatedAt       DateTime?
  chatMessage     ChatMessage[]
  question        Post          @relation(fields: [postId], references: [id])
  postId          Int

  @@map(name: "channel_rooms")
}

model ChatMessage {
  id              Int          @id @default(autoincrement())
  content         String
  sendUserId      Int
  sendUser        User         @relation(fields: [sendUserId], references: [id])
  baseRoomChat    Channel?     @relation(fields: [channelId], references: [id])
  channelRoom     ChannelRoom? @relation(fields: [channelRoomId], references: [id])
  answered        ChatMessage? @relation("answer", fields: [answeredId], references: [id])
  answeredMessage ChatMessage? @relation("answer")
  answeredId      Int? // 답장 글인지 여부, null-> 답장글 아님, id 값이면 ChatMessage에 있음. 그 값이.
  channelRoomId   Int? // 채널 방 id( 채널 소규모 채팅 방에서 사용)
  channelId       Int? // 채널 id(채널 잡담방 사용)

  createdAt DateTime
  updatedAt DateTime?

  @@map(name: "chat_messages")
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime
  updatedAt DateTime?
  channel   ChannelTag[]

  @@map("tags")
}

model ChannelTag {
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime
  updatedAt DateTime?

  @@id([channelId, tagId])
  @@map("channel_tags")
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String
  createdAt DateTime
  updatedAt DateTime?
  channel   ChannelCategory?

  @@map("categories")
}

model ChannelCategory {
  channel    Channel   @relation(fields: [channelId], references: [id])
  channelId  Int
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime
  updatedAt  DateTime?

  @@id([channelId, categoryId])
  @@map("channel_categories")
}

// Channel -- Like -- User
model ChannelLike {
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  createdAt DateTime
  updatedAt DateTime?

  @@id([userId, channelId])
  @@map("channel_like")
}

model Ban {
  user      User      @relation("ban", fields: [userId], references: [id])
  userId    Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int
  createdAt DateTime
  updatedAt DateTime?

  @@unique([userId, channelId], name: "banKey")
  @@map("ban")
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String
  status    Status
  content   String
  comment   Comment[]
  images    Image[]
  author    User        @relation("post", fields: [authorId], references: [id])
  authorId  Int
  channel   Channel     @relation(fields: [channelId], references: [id])
  channelId Int
  attention Attention[]

  reservedAt DateTime?
  createdAt  DateTime
  updatedAt  DateTime?

  @@map("posts")
  ChannelRoom ChannelRoom[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation("comment", fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime
  updatedAt DateTime?

  @@map("comments")
}

model Attention {
  user      User      @relation("Attention", fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime
  updatedAt DateTime?

  @@unique([userId, postId], name: "attentionKey")
  @@map("attention")
}

enum Status {
  Notice
  Open
  Reservation
  Close
  Clear
}
